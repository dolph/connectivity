package main

import (
	"net"
	"os"
	"strings"
)

type Source struct {
	Hostname string
	IPs      []*net.IP
}

func NewSource() *Source {
	hostname, err := os.Hostname()
	if err != nil {
		hostname = "localhost"
	}
	s := Source{
		Hostname: hostname}
	return &s
}

func (s *Source) String() string {
	IPs := []string{}
	for _, ip := range s.IPs {
		IPs = append(IPs, ip.String())
	}
	return "[" + s.Hostname + "][" + strings.Join(IPs, ",") + "]"
}

// Returns a list of non-loopback IP addresses for the local device. These
// represent the source of traffic generated by this tool.
func GetLocalIPs() *Source {
	source := NewSource()
	addresses, err := net.InterfaceAddrs()
	if err == nil {
		for _, address := range addresses {
			// ignore loopback interfaces and IPv6 altogether
			if ipnet, ok := address.(*net.IPNet); ok && !ipnet.IP.IsLoopback() && ipnet.IP.To4() != nil {
				source.IPs = append(source.IPs, &ipnet.IP)
			}
		}
	}
	if len(source.IPs) == 0 {
		localhost := net.ParseIP("127.0.0.1")
		source.IPs = append(source.IPs, &localhost)
	}
	return source
}
